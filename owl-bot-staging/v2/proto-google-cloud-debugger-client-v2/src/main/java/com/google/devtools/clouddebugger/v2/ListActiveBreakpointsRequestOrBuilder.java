// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/clouddebugger/v2/controller.proto

package com.google.devtools.clouddebugger.v2;

public interface ListActiveBreakpointsRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Required. Identifies the debuggee.
   * </pre>
   *
   * <code>string debuggee_id = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The debuggeeId.
   */
  java.lang.String getDebuggeeId();
  /**
   * <pre>
   * Required. Identifies the debuggee.
   * </pre>
   *
   * <code>string debuggee_id = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The bytes for debuggeeId.
   */
  com.google.protobuf.ByteString
      getDebuggeeIdBytes();

  /**
   * <pre>
   * A token that, if specified, blocks the method call until the list
   * of active breakpoints has changed, or a server-selected timeout has
   * expired. The value should be set from the `next_wait_token` field in
   * the last response. The initial value should be set to `"init"`.
   * </pre>
   *
   * <code>string wait_token = 2;</code>
   * @return The waitToken.
   */
  java.lang.String getWaitToken();
  /**
   * <pre>
   * A token that, if specified, blocks the method call until the list
   * of active breakpoints has changed, or a server-selected timeout has
   * expired. The value should be set from the `next_wait_token` field in
   * the last response. The initial value should be set to `"init"`.
   * </pre>
   *
   * <code>string wait_token = 2;</code>
   * @return The bytes for waitToken.
   */
  com.google.protobuf.ByteString
      getWaitTokenBytes();

  /**
   * <pre>
   * If set to `true` (recommended), returns `google.rpc.Code.OK` status and
   * sets the `wait_expired` response field to `true` when the server-selected
   * timeout has expired.
   * If set to `false` (deprecated), returns `google.rpc.Code.ABORTED` status
   * when the server-selected timeout has expired.
   * </pre>
   *
   * <code>bool success_on_timeout = 3;</code>
   * @return The successOnTimeout.
   */
  boolean getSuccessOnTimeout();
}
